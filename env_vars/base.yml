---

root_name: mitoc
client_root_name: docusign_root_certificate

# Set this flag to true so you can checkout code from a private git repository
# which is setup with an SSH key.
ssh_forward_agent: false

django_project_name: mitoc-trips
django_application_name: ws

flask_project_name: mitoc-member
flask_application_name: member


# Database settings.
# Hard-coded as the application name, but this is how it's configured on RDS
db_user: "ws"
db_name: "ws"
auth_db_name: "auth_db"


# RabbitMQ settings.
# (We'll always run RabbitMQ on the same server, regardless of deployment)
rabbitmq_server_name: "{{ inventory_hostname }}"
celery_broker_url: "amqp://{{ rabbitmq_application_user }}:{{ rabbitmq_application_password }}@localhost/{{ rabbitmq_application_vhost }}"

# Application settings
run_django_db_migrations: true
run_django_collectstatic: true
django_settings_file: "{{ django_application_name }}.settings"  # Dev/prod determined by envvar


# Worker settings
# For consistency, keep workers constant across dev, prod, and local
# (Load is always fairly low, regardless of environment)
gunicorn_num_workers: 3  # A good rule to follow is 2 x number of CPUs + 1
celery_num_workers: 2


# This is the SSL fingerprint of the DocuSign DEMO API, Obtained by running:
#     openssl x509 -in <cert> -noout -fingerprint
# On the demo Connect certificate on DocuSign's website
# https://trust.docusign.com/en-us/trust-certifications/docusign-public-certificates/
# (The production fingerprint must be used in prod, for obvious reasons)
docusign_client_fingerprint: 4f513c7089e3a6e4c47bceec321a6548b57ae969

cybersource_secret_key: "secret"
verify_cybersource_signature: "true"

# Note: DigiCert Global Root G2 (exp 2038)
# On Ubuntu, also available at /etc/ssl/certs/DigiCert_Global_Root_G2.pem
# This is the root for DocuSign Connect certificates
# See: https://www.docusign.com/trust/compliance/public-certificates
docusign_root_crt: |
  -----BEGIN CERTIFICATE-----
  MIIDjjCCAnagAwIBAgIQAzrx5qcRqaC7KGSxHQn65TANBgkqhkiG9w0BAQsFADBh
  MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
  d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBH
  MjAeFw0xMzA4MDExMjAwMDBaFw0zODAxMTUxMjAwMDBaMGExCzAJBgNVBAYTAlVT
  MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
  b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IEcyMIIBIjANBgkqhkiG
  9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuzfNNNx7a8myaJCtSnX/RrohCgiN9RlUyfuI
  2/Ou8jqJkTx65qsGGmvPrC3oXgkkRLpimn7Wo6h+4FR1IAWsULecYxpsMNzaHxmx
  1x7e/dfgy5SDN67sH0NO3Xss0r0upS/kqbitOtSZpLYl6ZtrAGCSYP9PIUkY92eQ
  q2EGnI/yuum06ZIya7XzV+hdG82MHauVBJVJ8zUtluNJbd134/tJS7SsVQepj5Wz
  tCO7TG1F8PapspUwtP1MVYwnSlcUfIKdzXOS0xZKBgyMUNGPHgm+F6HmIcr9g+UQ
  vIOlCsRnKPZzFBQ9RnbDhxSJITRNrw9FDKZJobq7nMWxM4MphQIDAQABo0IwQDAP
  BgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjAdBgNVHQ4EFgQUTiJUIBiV
  5uNu5g/6+rkS7QYXjzkwDQYJKoZIhvcNAQELBQADggEBAGBnKJRvDkhj6zHd6mcY
  1Yl9PMWLSn/pvtsrF9+wX3N3KjITOYFnQoQj8kVnNeyIv/iPsGEMNKSuIEyExtv4
  NeF22d+mQrvHRAiGfzZ0JFrabA0UWTW98kndth/Jsw1HKj2ZL7tcu7XUIOGZX1NG
  Fdtom/DzMNU+MeKNhJ7jitralj41E6Vf8PlwUHBHQRFXGU7Aj64GxJUTFy8bJZ91
  8rGOmaFvE7FBcf6IKshPECBV1/MUReXgRPTqh5Uykw7+U0b6LJ3/iyK5S9kJRaTe
  pLiaWN0bfVKfjllDiIGknibVb63dDcY3fe0Dkhvld1927jyNxF1WW6LZZm6zNTfl
  MrY=
  -----END CERTIFICATE-----

api_url: api.mitoc-trips.local
mutual_tls_api_url: tls.mitoc-trips.local
