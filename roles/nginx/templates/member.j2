# Define log format that includes client's fingerprint
# (This is useful for asserting the identity of the client
log_format ssl_client
  '$remote_addr - $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"Client fingerprint" $ssl_client_fingerprint '
  '"Client DN" $ssl_client_s_dn';


upstream {{ flask_application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ flask_virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

# This API is open to the public (individual locations may implement other access control)
server {
    listen              443;
    server_name         {{ api_url }};
    server_tokens       off;
    ssl on;
    {% if nginx_use_letsencrypt %}
    ssl_certificate     {{ api_letsencrypt_dir }}/{{ letsencrypt_cert_filename }};
    ssl_certificate_key {{ api_letsencrypt_dir }}/{{ letsencrypt_privkey_filename }};
    {% else %}
    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ root_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ root_name }}.key;
    {% endif %}
    ssl_protocols       TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_ecdh_curve secp384r1;
    ssl_stapling on;
    ssl_stapling_verify on;
    {% if nginx_strong_dh_group %}
    ssl_dhparam          /etc/ssl/certs/dhparams.pem;
    {% endif %}

    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; ";

    client_max_body_size 50M;

    access_log {{ api_access_log_file }};
    error_log {{ api_error_log_file }};

    location /members/membership {
        # These are CyberSource Secure Acceptance IP addresses
        # from https://support.cybersource.com/cybskb/index?page=content&id=C531&actp=LIST
        allow 198.241.162.0/24;
        allow 198.241.168.0/24;
        allow 198.241.206.21;
        allow 198.241.207.21;
        deny all;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        proxy_pass http://{{ flask_application_name }}_wsgi_server;
    }
}


# This API requires mutual TLS
server {
    listen              443;
    server_name         {{ mutual_tls_api_url }};
    server_tokens       off;
    ssl on;
    {% if nginx_use_letsencrypt %}
    ssl_certificate     {{ mutual_tls_letsencrypt_dir }}/{{ letsencrypt_cert_filename }};
    ssl_certificate_key {{ mutual_tls_letsencrypt_dir }}/{{ letsencrypt_privkey_filename }};
    {% else %}
    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ root_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ root_name }}.key;
    {% endif %}
    ssl_protocols       TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_ecdh_curve secp384r1;
    ssl_stapling on;
    ssl_stapling_verify on;
    {% if nginx_strong_dh_group %}
    ssl_dhparam          /etc/ssl/certs/dhparams.pem;
    {% endif %}

    ssl_client_certificate {{ nginx_ssl_dest_dir }}/{{ client_root_name }}.crt;
    ssl_verify_client on;
    ssl_verify_depth 10;

    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; ";

    # DocuSign in particular sends large PDF attachments
    client_max_body_size 50M;

    access_log {{ mutual_tls_access_log_file }} ssl_client;
    error_log {{ mutual_tls_error_log_file }};

    error_page 418 = @request_authorized;

    location /members/waiver {
        if ($ssl_client_fingerprint = "{{ docusign_client_fingerprint }}") {
            return 418;
        }
        return 403;
    }

    location @request_authorized {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        proxy_pass http://{{ flask_application_name }}_wsgi_server;
    }
}
